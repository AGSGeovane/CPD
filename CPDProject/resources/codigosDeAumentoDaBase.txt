private String[] loadInfoAsString(){

        File csvFile = new File(CSV_FILE_PATH);
        try {
            BufferedReader br = new BufferedReader(new FileReader(csvFile));

            int fileSize = countLines(CSV_FILE_PATH)-1;

//            System.out.println("Número de entidades do arquivo " + fileSize);


            //Relevant infos position from csv: 2 - UF; 3 - City; 5 - Male; 6 - Female; 7 - Ratio
            //Uses readLine for the first time to remove the header
             header = br.readLine();

            String currentLine = "";

            String[] data = new String[fileSize];

            for (int i = 0; i < fileSize; i++) {

//                System.out.println("Lendo a linha numero: " + (i+1));

                data[i] = br.readLine();
            }
            return data;

        }catch (FileNotFoundException fnfe) {
            System.out.println("File not found, please verify the file path - " + fnfe.getMessage());
        }catch (Exception e){
            e.printStackTrace();
        }
        return null;
    }

    private void persistenceFill(ArrayList<String> newDados){
        try {
            PrintWriter writer = new PrintWriter("database_with_10000.txt", "UTF-8");

            writer.append(header + "\n");
            for (String dado : newDados) {
                writer.append(dado + "\n");
            }

            writer.close();

        }catch (Exception e){

        }

    }

    private void fill_with_values(){

        String[] dados = loadInfoAsString();

        int missingFiles = 10000 - (dados.length);

        ArrayList<String> newDados = new ArrayList<String>(Arrays.asList(dados));

        System.out.println("Missing files: " + missingFiles);

        int i = 0;

        while (missingFiles != 0){
            System.out.println("Missing files: " + missingFiles);
            String[] splitted = dados[i].split(",");

            splitted[3] += "_2Version";
            splitted[6] = String.valueOf((int)(Double.valueOf(splitted[6]) * 1.08));

            String unitedString = "";

            for (String split:splitted) {
                unitedString += split + ", ";
            }
            StringBuilder sb = new StringBuilder(unitedString);
            sb.deleteCharAt(unitedString.length() - 1);
            sb.deleteCharAt(unitedString.length() - 2);

            unitedString = sb.toString();

            newDados.add(unitedString);
            missingFiles--;
            i++;
        }

        persistenceFill(newDados);

    }